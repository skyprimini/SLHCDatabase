@page "/Login"
@using System.ComponentModel.DataAnnotations
@layout DogAdoptionWebsite.Components.Layout.MainLayout

<PageTitle>Login</PageTitle>

<style>
    /* Page Header Styling */
    h1 {
        font-size: 32px;
        text-align: center;
        color: #b5651d; /* Brick color */
        font-family: 'Georgia', serif;
        margin-top: 20px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    }

    /* Login Form Container */
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 70vh;
        background-color: #fdf6e3; /* Pastel yellow background */
        padding: 20px;
    }

    /* Form Styling */
    .login-form {
        width: 100%;
        max-width: 400px;
        background-color: #ffffff;
        border: 2px solid #6b8e23; /* Olive border */
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 30px;
    }

    .form-floating {
        margin-bottom: 20px;
    }

        .form-floating label {
            color: #333333; /* Dark gray text */
        }

    .form-control {
        border: 1px solid #6b8e23; /* Olive border */
        border-radius: 5px;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
    }

        .form-control:focus {
            border-color: #b5651d; /* Brick color focus */
            box-shadow: 0 0 5px rgba(181, 101, 29, 0.5);
        }

    .btn-primary {
        background-color: #b5651d; /* Brick color */
        border-color: #b5651d;
        font-size: 18px;
        font-weight: bold;
        padding: 10px;
        border-radius: 5px;
        width: 100%;
    }

        .btn-primary:hover {
            background-color: #6b8e23;
            border-color: #6b8e23;
        }

    .text-danger {
        font-size: 14px;
        color: #ff4d4f; /* Highlighted red for validation errors */
    }
</style>

<div class="login-container">
    <div class="login-form">
        <h1>Login</h1>
        <EditForm Model="Input" OnValidSubmit="OnLogin">
            <DataAnnotationsValidator />
            <hr />
            <div class="form-floating">
                <InputText @bind-Value="Input.Email" class="form-control" placeholder="Email" />
                <label>Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" placeholder="Password" />
                <label>Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private InputModel Input { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery(Name = "Email")]
    public string? Email
    {
        get => Input.Email;
        set => Input.Email = value ?? ""; // Assign value to Input.Email
    }

    [Parameter]
    [SupplyParameterFromQuery(Name = "Password")]
    public string? Password
    {
        get => Input.Password;
        set => Input.Password = value ?? ""; // Assign value to Input.Password
    }

    private async Task OnLogin()
    {
        if (!string.IsNullOrEmpty(Input.Email) && !string.IsNullOrEmpty(Input.Password))
        {
            // Perform login authentication (logic here)
        }
        else
        {
            // Handle validation errors
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
