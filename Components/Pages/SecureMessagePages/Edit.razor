@page "/securemessages/edit"
@using Microsoft.EntityFrameworkCore
@using DogAdoptionWebsite.Models
@inject IDbContextFactory<DogAdoptionWebsite.Data.DogAdoptionWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>SecureMessage</h2>
<hr />
@if (SecureMessage is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="SecureMessage" OnValidSubmit="UpdateSecureMessage" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="SecureMessage.SecureMessageId" value="@SecureMessage.SecureMessageId" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="SecureMessage.FirstName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => SecureMessage.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="SecureMessage.LastName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => SecureMessage.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="SecureMessage.Email" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => SecureMessage.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="subject" class="form-label">Subject:</label>
                    <InputText id="subject" @bind-Value="SecureMessage.Subject" class="form-control" />
                    <ValidationMessage For="() => SecureMessage.Subject" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="message" class="form-label">Message:</label>
                    <InputText id="message" @bind-Value="SecureMessage.Message" class="form-control" />
                    <ValidationMessage For="() => SecureMessage.Message" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/securemessages">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int SecureMessageId { get; set; }

    [SupplyParameterFromForm]
    private SecureMessage? SecureMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        SecureMessage ??= await context.SecureMessage.FirstOrDefaultAsync(m => m.SecureMessageId == SecureMessageId);

        if (SecureMessage is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateSecureMessage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(SecureMessage!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SecureMessageExists(SecureMessage!.SecureMessageId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/securemessages");
    }

    private bool SecureMessageExists(int securemessageid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.SecureMessage.Any(e => e.SecureMessageId == securemessageid);
    }
}
